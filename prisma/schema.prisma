// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("RAILWAY_POSTGRESQL_PUBLIC_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Language {
  id   Int    @id @default(autoincrement())
  code String @unique
  name String

  // Relations
  postTranslations     PostTranslation[]
  categoryTranslations CategoryTranslation[]
  tagTranslations      TagTranslation[]
  authorTranslations   AuthorTranslation[]
}

// Table for posts
model Post {
  id          Int       @id @default(autoincrement())
  author_slug String
  cate_slug   String
  postFormat  String
  slug        String    @unique
  featureImg  String
  date        String
  videoLink   String?
  audioLink   String?
  gallery     String[]  @default([])
  story       Boolean   @default(false)
  trending    Boolean   @default(false)
  published   Boolean   @default(false)
  post_views  String    @default("0")
  post_share  String    @default("0")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  // Relations
  translations PostTranslation[]
  tags         Tag[]
  author       Author            @relation(fields: [author_slug], references: [author_slug])
  category     Category          @relation(fields: [cate_slug], references: [cate_slug])
}

// Table for post translations
model PostTranslation {
  id           Int     @id @default(autoincrement())
  postId       Int
  languageCode String
  title        String
  excerpt      String
  content      String
  quoteText    String?

  // Relations
  post     Post     @relation(fields: [postId], references: [id])
  language Language @relation(fields: [languageCode], references: [code])

  @@unique([postId, languageCode]) // Ensure each post has a unique translation per language
}

// Table for categories
model Category {
  id        Int      @id @default(autoincrement())
  cate_slug String   @unique
  cate_bg   String?
  cate_img  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  translations CategoryTranslation[]
  Post         Post[]
}

// Table for category translations
model CategoryTranslation {
  id           Int     @id @default(autoincrement())
  categoryId   Int
  languageCode String
  cate         String
  description  String?

  // Relations
  category Category @relation(fields: [categoryId], references: [id])
  language Language @relation(fields: [languageCode], references: [code])

  @@unique([categoryId, languageCode]) // Ensure each category has a unique translation per language
}

// Table for tags
model Tag {
  id        Int      @id @default(autoincrement())
  tag_slug  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  translations TagTranslation[]
  posts        Post[]
}

// Table for tag translations
model TagTranslation {
  id           Int    @id @default(autoincrement())
  tagId        Int
  languageCode String
  tag          String

  // Relations
  tagR     Tag      @relation(fields: [tagId], references: [id])
  language Language @relation(fields: [languageCode], references: [code])

  @@unique([tagId, languageCode]) // Ensure each tag has a unique translation per language
}

// Table for authors
model Author {
  id            Int     @id @default(autoincrement())
  author_slug   String  @unique
  author_name   String
  author_img    String?
  author_social Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  translations AuthorTranslation[]
  posts        Post[]
}

model AuthorTranslation {
  id           Int     @id @default(autoincrement())
  authorId     Int
  languageCode String
  author_desg  String?
  author_bio   String?

  // Relations
  author   Author   @relation(fields: [authorId], references: [id])
  language Language @relation(fields: [languageCode], references: [code])

  @@unique([authorId, languageCode]) // Ensure each author has a unique translation per language
}

model Image {
  id           Int      @id @default(autoincrement())
  originalname String
  filename     String
  filepath     String
  destination  String
  mimetype     String
  url          String?
  size         Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// model Account {
//   id                 Int     @id @default(autoincrement())
//   userId             Int     @map("user_id")
//   type               String
//   provider           String
//   providerAccountId  String  @map("provider_account_id")
//   refresh_token      String?
//   access_token       String?
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?
//   session_state      String?
//   oauth_token_secret String?
//   oauth_token        String?
//
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//
//   @@unique([provider, providerAccountId])
// }
//
// model Session {
//   id           Int      @id @default(autoincrement())
//   userId       Int      @map("user_id")
//   sessionToken String   @unique @map("session_token")
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }
//
// model User {
//   id            Int       @id @default(autoincrement())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
//   createdAt     DateTime  @default(now()) @map(name: "created_at")
//   updatedAt     DateTime  @updatedAt @map(name: "updated_at")
// }
//
// model VerificationToken {
//   id         Int      @id @default(autoincrement())
//   identifier String
//   token      String   @unique
//   expires    DateTime
//
//   @@unique([identifier, token])
// }
