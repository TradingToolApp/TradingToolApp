// schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("RAILWAY_POSTGRESQL_PUBLIC_URL") // uses connection pooling
    // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// model Post {
//     id             String          @id @default(cuid())
//     PostVietnamese PostVietnamese?
//     PostEnglish    PostEnglish?
// }

model PostVietnamese {
    id            String   @id @default(cuid())
    slug          String   @unique
    title         String
    excerpt       String
    postFormat    String
    featureImg    String
    date          String
    content       String
    quoteText     String?
    videoLink     String?
    audioLink     String?
    gallery       String[] @default([])
    cate          String
    cate_img      String?
    cate_bg       String?
    author_name   String
    author_desg   String?
    author_img    String?
    author_bio    String?
    author_social Json?
    tags          String[] @default([])
    post_views    String   @default("0")
    post_share    String   @default("0")
    story         Boolean  @default(false)
    trending      Boolean  @default(false)
    published     Boolean  @default(false)
}

model PostEnglish {
    id            String   @id @default(cuid())
    slug          String   @unique
    title         String
    excerpt       String
    postFormat    String
    featureImg    String
    date          String
    content       String
    quoteText     String?
    videoLink     String?
    audioLink     String?
    gallery       String[] @default([])
    cate          String
    cate_img      String?
    cate_bg       String?
    author_name   String
    author_desg   String?
    author_img    String?
    author_bio    String?
    author_social Json?
    tags          String[] @default([])
    post_views    String   @default("0")
    post_share    String   @default("0")
    story         Boolean  @default(false)
    trending      Boolean  @default(false)
    published     Boolean  @default(false)
}

model Image {
    id           String   @id @default(cuid())
    originalname String
    filename     String
    filepath     String
    destination  String
    mimetype     String
    url          String?
    size         Int?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    // posts         Post[]
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @updatedAt @map(name: "updated_at")
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
